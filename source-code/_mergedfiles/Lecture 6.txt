**************************
Lecture 6 -- animate0.html
**************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes grow {
                from {
                    font-size: 20px;
                }
                to  {
                    font-size: 100px;
                }
            }

            h1 {
                animation-name: grow;
                animation-duration: 2s;
                animation-fill-mode: forwards;
            }
        </style>
    </head>
    <body>
        <h1>Welcome!</h1>
    </body>
</html>



**************************
Lecture 6 -- animate1.html
**************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes move {
                from {
                    left: 0%;
                }
                to  {
                    left: 50%;
                }
            }

            h1 {
                position: relative;
                animation-name: move;
                animation-duration: 3s;
                animation-fill-mode: forwards;
            }
        </style>
    </head>
    <body>
        <h1>Welcome!</h1>
    </body>
</html>



**************************
Lecture 6 -- animate2.html
**************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes move {
                0% {
                    left: 0%;
                }
                50% {
                    left: 50%;
                }
                100% {
                    left: 0%;
                }
            }

            h1 {
                position: relative;
                animation-name: move;
                animation-duration: 3s;
                animation-fill-mode: forwards;
            }
        </style>
    </head>
    <body>
        <h1>Welcome!</h1>
    </body>
</html>



**************************
Lecture 6 -- animate3.html
**************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes move {
                0% {
                    left: 0%;
                }
                50% {
                    left: 50%;
                }
                100% {
                    left: 0%;
                }
            }

            h1 {
                position: relative;
                animation-name: move;
                animation-duration: 3s;
                animation-fill-mode: forwards;
                animation-iteration-count: infinite;
            }
        </style>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const h1 = document.querySelector('h1');
                h1.style.animationPlayState  = 'paused';
                document.querySelector('button').onclick = () => {
                    if (h1.style.animationPlayState  === 'paused')
                        h1.style.animationPlayState = 'running';
                    else
                        h1.style.animationPlayState  = 'paused';
                };
            });
        </script>
    </head>
    <body>
        <button>Click Here!</button>
        <h1>Welcome!</h1>
    </body>
</html>



*************************
Lecture 6 -- circle0.html
*************************


<!DOCTYPE html>
<html>
    <body>
        <svg style="width:100%; height:800px">
            <circle cx="200" cy="200" r="50" style="fill:blue"/>
        </svg>
    </body>
</html>



*************************
Lecture 6 -- circle1.html
*************************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        svg.append('circle')
           .attr('cx', 200)
           .attr('cy', 200)
           .attr('r', 90)
           .style('fill', 'green');

    </script>
</html>



*************************
Lecture 6 -- circle2.html
*************************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        const c = svg.append('circle')
                     .attr('cx', 200)
                     .attr('cy', 200)
                     .attr('r', 50)
                     .style('fill', 'blue');

        c.transition()
         .duration(1000)
         .attr('cx', 500)
         .attr('cy', 500)
         .style('fill', 'red');

    </script>
</html>



*************************
Lecture 6 -- circle3.html
*************************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        const c = svg.append('circle')
                     .attr('cx', 200)
                     .attr('cy', 200)
                     .attr('r', 50)
                     .style('fill', 'blue');

        c.transition()
         .duration(1000)
         .delay(1000)
         .attr('cx', 500);

        c.on('click', function() {
            d3.select(this).transition()
                           .duration(3000)
                           .style('fill', 'red');
        });

    </script>
</html>



***********************
Lecture 6 -- draw0.html
***********************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        function draw_point() {
            const coords = d3.mouse(this);

            svg.append('circle')
               .attr('cx', coords[0])
               .attr('cy', coords[1])
               .attr('r', 5)
               .style('fill', 'black');
        };

        svg.on('mousemove', draw_point);

    </script>
</html>



***********************
Lecture 6 -- draw1.html
***********************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');
        let drawing = false;

        function draw_point() {
            if (!drawing)
                return;

            const coords = d3.mouse(this);

            svg.append('circle')
               .attr('cx', coords[0])
               .attr('cy', coords[1])
               .attr('r', 5)
               .style('fill', 'black');
        };

        svg.on('mousedown', () => {
            drawing = true;
        });

        svg.on('mouseup', () => {
            drawing = false;
        });

        svg.on('mousemove', draw_point);

    </script>
</html>



***********************
Lecture 6 -- draw2.html
***********************


<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <style>
            .container {
                text-align: center;
            }
        </style>
        <script src="draw2.js"></script>
    </head>
    <body>
        <div class="container">
            <h1>CSCI E-33a Draw</h1>
            <div id="options" class="row">
                <select id="color-picker">
                    <option value="black">Black</option>
                    <option value="red">Red</option>
                    <option value="blue">Blue</option>
                    <option value="green">Green</option>
                </select>
                <select id="thickness-picker">
                    <option value=1>1</option>
                    <option value=2>2</option>
                    <option value=3 selected>3</option>
                    <option value=4>4</option>
                    <option value=5>5</option>
                    <option value=6>6</option>
                    <option value=7>7</option>
                    <option value=8>8</option>
                    <option value=9>9</option>
                    <option value=10>10</option>
                </select>
                <button id="erase">Erase</button>
            </div>
        </div>
        <svg id="draw">
        </svg>
    </body>
</html>



*********************
Lecture 6 -- draw2.js
*********************


document.addEventListener('DOMContentLoaded', () => {

    // state
    let draw = false;

    // elements
    let points = [];
    let lines = [];
    let svg = null;

    function render() {

        // create the selection area
        svg = d3.select('#draw')
                .attr('height', window.innerHeight)
                .attr('width', window.innerWidth);

        svg.on('mousedown', function() {
            draw = true;
            const coords = d3.mouse(this);
            draw_point(coords[0], coords[1], false);
        });

        svg.on('mouseup', () =>{
            draw = false;
        });

        svg.on('mousemove', function() {
            if (!draw)
                return;
            const coords = d3.mouse(this);
            draw_point(coords[0], coords[1], true);
        });

        document.querySelector('#erase').onclick = () => {
            for (let i = 0; i < points.length; i++)
                points[i].remove();
            for (let i = 0; i < lines.length; i++)
                lines[i].remove();
            points = [];
            lines = [];
        }

    }

    function draw_point(x, y, connect) {

        const color = document.querySelector('#color-picker').value;
        const thickness = document.querySelector('#thickness-picker').value;

        if (connect) {
            const last_point = points[points.length - 1];
            const line = svg.append('line')
                            .attr('x1', last_point.attr('cx'))
                            .attr('y1', last_point.attr('cy'))
                            .attr('x2', x)
                            .attr('y2', y)
                            .attr('stroke-width', thickness * 2)
                            .style('stroke', color);
            lines.push(line);
        }

        const point = svg.append('circle')
                         .attr('cx', x)
                         .attr('cy', y)
                         .attr('r', thickness)
                         .style('fill', color);
        points.push(point);
    }

    render();
});



**********************
Lecture 6 -- rect.html
**********************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        svg.append('rect')
           .attr('x', 200)
           .attr('y', 200)
           .attr('width', 700)
           .attr('height', 50)
           .style('fill', 'blue');

    </script>
</html>



************************
Lecture 6 -- scroll.html
************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <script>
            window.onscroll = () => {
                console.log('----');
                console.log(window.innerHeight);
                console.log(window.scrollY);
                console.log(document.body.offsetHeight);
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    document.querySelector('body').style.background = 'green';
                } else {
                    document.querySelector('body').style.background = 'white';
                }
            };
        </script>
    </head>
    <body>
        <p>1</p>
        <p>2</p>
        <p>3</p>
        <p>4</p>
        <p>5</p>
        <p>6</p>
        <p>7</p>
        <p>8</p>
        <p>9</p>
        <p>10</p>
        <p>11</p>
        <p>12</p>
        <p>13</p>
        <p>14</p>
        <p>15</p>
        <p>16</p>
        <p>17</p>
        <p>18</p>
        <p>19</p>
        <p>20</p>
        <p>21</p>
        <p>22</p>
        <p>23</p>
        <p>24</p>
        <p>25</p>
        <p>26</p>
        <p>27</p>
        <p>28</p>
        <p>29</p>
        <p>30</p>
        <p>31</p>
        <p>32</p>
        <p>33</p>
        <p>34</p>
        <p>35</p>
        <p>36</p>
        <p>37</p>
        <p>38</p>
        <p>39</p>
        <p>40</p>
        <p>41</p>
        <p>42</p>
        <p>43</p>
        <p>44</p>
        <p>45</p>
        <p>46</p>
        <p>47</p>
        <p>48</p>
        <p>49</p>
        <p>50</p>
        <p>51</p>
        <p>52</p>
        <p>53</p>
        <p>54</p>
        <p>55</p>
        <p>56</p>
        <p>57</p>
        <p>58</p>
        <p>59</p>
        <p>60</p>
        <p>61</p>
        <p>62</p>
        <p>63</p>
        <p>64</p>
        <p>65</p>
        <p>66</p>
        <p>67</p>
        <p>68</p>
        <p>69</p>
        <p>70</p>
        <p>71</p>
        <p>72</p>
        <p>73</p>
        <p>74</p>
        <p>75</p>
        <p>76</p>
        <p>77</p>
        <p>78</p>
        <p>79</p>
        <p>80</p>
        <p>81</p>
        <p>82</p>
        <p>83</p>
        <p>84</p>
        <p>85</p>
        <p>86</p>
        <p>87</p>
        <p>88</p>
        <p>89</p>
        <p>90</p>
        <p>91</p>
        <p>92</p>
        <p>93</p>
        <p>94</p>
        <p>95</p>
        <p>96</p>
        <p>97</p>
        <p>98</p>
        <p>99</p>
        <p>100</p>
    </body>
</html>



***************************
Lecture 6 -- stoplight.html
***************************


<!DOCTYPE html>
<html>
    <head>
        <script src="https://d3js.org/d3.v4.min.js"></script>
    </head>
    <body>
        <svg id="svg" style="width:100%; height:800px"/>
    </body>
    <script>

        const svg = d3.select('#svg');

        svg.append('rect')
           .attr('x', 100)
           .attr('y', 10)
           .attr('width', 200)
           .attr('height', 500)
           .style('fill', 'black');

        const red = svg.append('circle')
                       .attr('cx', 200)
                       .attr('cy', 100)
                       .attr('r', 75)
                       .style('fill', 'grey');

        const yellow = svg.append('circle')
                          .attr('cx', 200)
                          .attr('cy', 260)
                          .attr('r', 75)
                          .style('fill', 'grey');

        const green = svg.append('circle')
                         .attr('cx', 200)
                         .attr('cy', 420)
                         .attr('r', 75)
                         .style('fill', 'grey');

        red.on('click', () => {
            red.style('fill', 'red');
            yellow.style('fill', 'grey');
            green.style('fill', 'grey');
        });

        yellow.on('click', () => {
            red.style('fill', 'grey');
            yellow.style('fill', 'yellow');
            green.style('fill', 'grey');
        });

        green.on('click', () => {
            red.style('fill', 'grey');
            yellow.style('fill', 'grey');
            green.style('fill', 'green');
        });

    </script>
</html>



****************************
Lecture 6 -- dice0/dice.html
****************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>
        <script>

            // Template for roll results
            const template = Handlebars.compile("<li>You rolled a {{ value }}</li>");

            document.addEventListener('DOMContentLoaded', () => {
                document.querySelector('#roll').onclick = ()  => {

                    // Generate a random roll.
                    const roll = Math.floor((Math.random() * 6) + 1);

                    // Add roll result to DOM.
                    const content = template({'value': roll});
                    document.querySelector('#rolls').innerHTML += content;
                };
            });
        </script>
    </head>
    <body>
        <button id="roll">Roll</button>
        <ul id="rolls">
        </ul>
    </body>
</html>



****************************
Lecture 6 -- dice1/dice.html
****************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            li {
                line-height: 30px;
            }
            img {
                height: 30px;
                vertical-align: middle;
            }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>
        <script>

            // Template for roll results
            const template = Handlebars.compile("<li>You rolled: <img src=\"img/{{ value }}.png\"></li>");

            document.addEventListener('DOMContentLoaded', () => {
                document.querySelector('#roll').onclick = ()  => {

                    // Generate a random roll.
                    const roll = Math.floor((Math.random() * 6) + 1);

                    // Add roll result to DOM.
                    const content = template({'value': roll});
                    document.querySelector('#rolls').innerHTML += content;
                };
            });
        </script>
    </head>
    <body>
        <button id="roll">Roll</button>
        <ul id="rolls">
        </ul>
    </body>
</html>



****************************
Lecture 6 -- dice2/dice.html
****************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            li {
                line-height: 30px;
            }
            img {
                height: 30px;
                vertical-align: middle;
            }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>
        <script id="result" type="text/x-handlebars-template">
            <li>
                You rolled:
                <img alt="{{ value }}" title="{{ value }}" src="img/{{ value }}.png"></img>
            </li>
        </script>
        <script>

            // Template for roll results
            const template = Handlebars.compile(document.querySelector('#result').innerHTML);

            document.addEventListener('DOMContentLoaded', () => {
                document.querySelector('#roll').onclick = ()  => {

                    // Generate a random roll.
                    const roll = Math.floor((Math.random() * 6) + 1);

                    // Add roll result to DOM.
                    const content = template({'value': roll});
                    document.querySelector('#rolls').innerHTML += content;
                };
            });
        </script>
    </head>
    <body>
        <button id="roll">Roll</button>
        <ul id="rolls">
        </ul>
    </body>
</html>



****************************
Lecture 6 -- dice3/dice.html
****************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            li {
                line-height: 30px;
            }
            img {
                height: 30px;
                vertical-align: middle;
            }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>
        <script id="result" type="text/template">
            <li>
                You rolled:
                {{#each values}}
                    <img alt="{{ this }}" title="{{ this }}" src="img/{{ this }}.png">
                {{/each}}
                (Total: {{ total }})
            </li>
        </script>
        <script>

            // Template for roll results
            const template = Handlebars.compile(document.querySelector('#result').innerHTML);

            document.addEventListener('DOMContentLoaded', () => {
                document.querySelector('#roll').onclick = ()  => {

                    // Generate random rolls.
                    const counter = parseInt(document.querySelector('#counter').value);
                    const rolls = [];
                    let total = 0;
                    for (let i = 0; i < counter; i++) {
                        const value = Math.floor(Math.random() * 6) +  1;
                        rolls.push(value);
                        total += value;
                    };

                    // Add roll results to DOM.
                    const content = template({'values': rolls, 'total': total});
                    document.querySelector('#rolls').innerHTML += content;
                };
            });
        </script>
    </head>
    <body>
        <input id="counter" type="number" placeholder="Number of Rolls" min="1" value="1">
        <button id="roll">Roll</button>
        <ul id="rolls">
        </ul>
    </body>
</html>



*************************************
Lecture 6 -- multipage/application.py
*************************************


from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def first():
    return render_template("first.html")

@app.route("/second")
def second():
    return render_template("second.html")

@app.route("/third")
def third():
    return render_template("third.html")



*******************************************
Lecture 6 -- multipage/templates/first.html
*******************************************


{% extends "layout.html" %}

{% block body %}
    <h1>First Page</h1>

    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam tortor mauris, maximus semper volutpat vitae, varius placerat dui. Nunc consequat dictum est, at vestibulum est hendrerit at. Mauris suscipit neque ultrices nisl interdum accumsan. Sed euismod, ligula eget tristique semper, lectus est pellentesque dui, sit amet rhoncus leo mi nec orci. Curabitur hendrerit, est in ultricies interdum, lacus lacus aliquam mauris, vel vestibulum magna nisl id arcu. Cras luctus tellus ac convallis venenatis. Cras consequat tempor tincidunt. Proin ultricies purus mauris, non tempor turpis mollis id. Nam iaculis risus mauris, quis ornare neque semper vel.
{% endblock %}



********************************************
Lecture 6 -- multipage/templates/layout.html
********************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
    </head>
    <body>
        <ul id="nav">
            <li><a href="{{ url_for('first') }}">First Page</a></li>
            <li><a href="{{ url_for('second') }}">Second Page</a></li>
            <li><a href="{{ url_for('third') }}">Third Page</a></li>
        </ul>
        <hr>
        {% block body %}
        {% endblock %}
    </body>
</html>



********************************************
Lecture 6 -- multipage/templates/second.html
********************************************


{% extends "layout.html" %}

{% block body %}
    <h1>Second Page</h1>

    Praesent euismod auctor quam, id congue tellus malesuada vitae. Ut sed lacinia quam. Sed vitae mattis metus, vel gravida ante. Praesent tincidunt nulla non sapien tincidunt, vitae semper diam faucibus. Nulla venenatis tincidunt efficitur. Integer justo nunc, egestas eget dignissim dignissim, fermentum ac sapien. Suspendisse non libero facilisis, dictum nunc ut, tincidunt diam.
{% endblock %}



*******************************************
Lecture 6 -- multipage/templates/third.html
*******************************************


{% extends "layout.html" %}

{% block body %}
    <h1>Third  Page</h1>

    Morbi imperdiet nunc ac quam hendrerit faucibus. Morbi viverra justo est, ut bibendum lacus vehicula at. Fusce eget risus arcu. Quisque dictum porttitor nisl, eget condimentum leo mollis sed. Proin justo nisl, lacinia id erat in, suscipit ultrices nisi. Suspendisse placerat nulla at volutpat interdum. In porttitor condimentum est nec ultricies. Donec nec mollis neque, id dapibus sem.
{% endblock %}



**********************************
Lecture 6 -- posts0/application.py
**********************************


import time

from flask import Flask, jsonify, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/posts", methods=["POST"])
def posts():

    # Get start and end point for posts to generate.
    start = int(request.form.get("start") or 0)
    end = int(request.form.get("end") or (start + 9))

    # Generate list of posts.
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")

    # Artificially delay speed of response.
    time.sleep(1)

    # Return list of posts.
    return jsonify(data)



****************************************
Lecture 6 -- posts0/templates/index.html
****************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            .post {
                background-color: #77dd11;
                padding: 20px;
                margin: 10px;
            }

            body {
                padding-bottom: 50px;
            }
        </style>
        <script>

            // Start with first post.
            let counter = 1;

            // Load posts 20 at a time.
            const quantity = 20;

            // When DOM loads, render the first 20 posts.
            document.addEventListener('DOMContentLoaded', load);

            // If scrolled to bottom, load the next 20 posts.
            window.onscroll = () => {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    load();
                }
            };

            // Load next set of posts.
            function load() {

                // Set start and end post numbers, and update counter.
                const start = counter;
                const end = start + quantity - 1;
                counter = end + 1;

                // Open new request to get new posts.
                const request = new XMLHttpRequest();
                request.open('POST', '/posts');
                request.onload = () => {
                    const data = JSON.parse(request.responseText);
                    data.forEach(add_post);
                };

                // Add start and end points to request data.
                const data = new FormData();
                data.append('start', start);
                data.append('end', end);

                // Send request.
                request.send(data);
            };

            // Add a new post with given contents to DOM.
            function add_post(contents) {

                // Create new post.
                const post = document.createElement('div');
                post.className = 'post';
                post.innerHTML = contents;

                // Add post to DOM.
                document.querySelector('#posts').append(post);
            };
        </script>
    </head>
    <body>
        <div id="posts">
        </div>
    </body>
</html>



**********************************
Lecture 6 -- posts1/application.py
**********************************


import time

from flask import Flask, jsonify, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/posts", methods=["POST"])
def posts():

    # Get start and end point for posts to generate.
    start = int(request.form.get("start") or 0)
    end = int(request.form.get("end") or (start + 9))

    # Generate list of posts.
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")

    # Artificially delay speed of response.
    time.sleep(1)

    # Return list of posts.
    return jsonify(data)



****************************************
Lecture 6 -- posts1/templates/index.html
****************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            .hide  {
                float: right;
            }

            .post {
                background-color: #77dd11;
                padding: 20px;
                margin: 10px;
            }

            body {
                padding-bottom: 50px;
            }
        </style>
        <script>

            // Start with first post.
            let counter = 1;

            // Load posts 20 at a time.
            const quantity = 20;

            // When DOM loads, render the first 20 posts.
            document.addEventListener('DOMContentLoaded', load);

            // If scrolled to bottom, load the next 20 posts.
            window.onscroll = () => {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    load();
                }
            };

            // Load next set of posts.
            function load() {

                // Set start and end post numbers, and update counter.
                const start = counter;
                const end = start + quantity - 1;
                counter = end + 1;

                // Open new request to get new posts.
                const request = new XMLHttpRequest();
                request.open('POST', '/posts');
                request.onload = () => {
                    const data = JSON.parse(request.responseText);
                    data.forEach(add_post);
                };

                // Add start and end points to request data.
                const data = new FormData();
                data.append('start', start);
                data.append('end', end);

                // Send request.
                request.send(data);
            };

            // Add a new post with given contents to DOM.
            function add_post(contents) {

                // Create new post.
                const post = document.createElement('div');
                post.className = 'post';
                post.innerHTML = contents;

                // Add button to hide post.
                const hide = document.createElement('button');
                hide.className = 'hide';
                hide.innerHTML = 'Hide';
                post.append(hide);

                // When hide button is clicked, remove post.
                hide.onclick = function() {
                    this.parentElement.remove();
                };

                // Add post to DOM.
                document.querySelector('#posts').append(post);
            };
        </script>
    </head>
    <body>
        <div id="posts">
        </div>
    </body>
</html>



**********************************
Lecture 6 -- posts2/application.py
**********************************


import time

from flask import Flask, jsonify, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/posts", methods=["POST"])
def posts():

    # Get start and end point for posts to generate.
    start = int(request.form.get("start") or 0)
    end = int(request.form.get("end") or (start + 9))

    # Generate list of posts.
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")

    # Artificially delay speed of response.
    time.sleep(1)

    # Return list of posts.
    return jsonify(data)



****************************************
Lecture 6 -- posts2/templates/index.html
****************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            .hide  {
                float: right;
            }

            .post {
                background-color: #77dd11;
                padding: 20px;
                margin: 10px;
            }

            body {
                padding-bottom: 50px;
            }
        </style>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>

        <script id="post" type="text/x-handlebars-template">
            <div class="post">
                {% raw -%}
                    {{ contents }}
                {%- endraw %}
                <button class="hide">Hide</button>
            </div>
        </script>

        <script>

            // Start with first post.
            let counter = 1;

            // Load posts 20 at a time.
            const quantity = 20;

            // When DOM loads, render the first 20 posts.
            document.addEventListener('DOMContentLoaded', load);

            // If scrolled to bottom, load the next 20 posts.
            window.onscroll = () => {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    load();
                }
            };

            // If hide button is clicked, delete the post.
            document.addEventListener('click', event => {
                const element = event.target;
                if (element.className === 'hide') {
                    element.parentElement.remove();
                }
            });

            // Load next set of posts.
            function load() {

                // Set start and end post numbers, and update counter.
                const start = counter;
                const end = start + quantity - 1;
                counter = end + 1;

                // Open new request to get new posts.
                const request = new XMLHttpRequest();
                request.open('POST', '/posts');
                request.onload = () => {
                    const data = JSON.parse(request.responseText);
                    data.forEach(add_post);
                };

                // Add start and end points to request data.
                const data = new FormData();
                data.append('start', start);
                data.append('end', end);

                // Send request.
                request.send(data);
            };

            // Add a new post with given contents to DOM.
            const post_template = Handlebars.compile(document.querySelector('#post').innerHTML);
            function add_post(contents) {

                // Create new post.
                const post = post_template({'contents': contents});

                // Add post to DOM.
                document.querySelector('#posts').innerHTML += post;
            }
        </script>
    </head>
    <body>
        <div id="posts">
        </div>
    </body>
</html>



**********************************
Lecture 6 -- posts3/application.py
**********************************


import time

from flask import Flask, jsonify, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/posts", methods=["POST"])
def posts():

    # Get start and end point for posts to generate.
    start = int(request.form.get("start") or 0)
    end = int(request.form.get("end") or (start + 9))

    # Generate list of posts.
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")

    # Artificially delay speed of response.
    time.sleep(1)

    # Return list of posts.
    return jsonify(data)



****************************************
Lecture 6 -- posts3/templates/index.html
****************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes hide {
                from {
                    opacity: 1;
                }
                to {
                    opacity: 0;
                }
            }

            .hide  {
                float: right;
            }

            .post {
                background-color: #77dd11;
                padding: 20px;
                margin-bottom: 10px;
                animation-name: hide;
                animation-duration: 2s;
                animation-fill-mode: forwards;
                animation-play-state: paused;
            }

            body {
                padding-bottom: 50px;
            }
        </style>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>

        <script id="post" type="text/x-handlebars-template">
            <div class="post">
                {% raw -%}
                    {{ contents }}
                {%- endraw %}
                <button class="hide">Hide</button>
            </div>
        </script>

        <script>

            // Start with first post.
            let counter = 1;

            // Load posts 20 at a time.
            const quantity = 20;

            // When DOM loads, render the first 20 posts.
            document.addEventListener('DOMContentLoaded', load);

            // If scrolled to bottom, load the next 20 posts.
            window.onscroll = () => {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    load();
                }
            };

            // If hide button is clicked, delete the post.
            document.addEventListener('click', event => {
                const element = event.target;
                if (element.className === 'hide') {
                    element.parentElement.style.animationPlayState = 'running';
                    element.parentElement.addEventListener('animationend', () =>  {
                        element.parentElement.remove();
                    });
                }
            });

            // Load next set of posts.
            function load() {

                // Set start and end post numbers, and update counter.
                const start = counter;
                const end = start + quantity - 1;
                counter = end + 1;

                // Open new request to get new posts.
                const request = new XMLHttpRequest();
                request.open('POST', '/posts');
                request.onload = () => {
                    const data = JSON.parse(request.responseText);
                    data.forEach(add_post);
                };

                // Add start and end points to request data.
                const data = new FormData();
                data.append('start', start);
                data.append('end', end);

                // Send request.
                request.send(data);
            };

            // Add a new post with given contents to DOM.
            const post_template = Handlebars.compile(document.querySelector('#post').innerHTML);
            function add_post(contents) {

                // Create new post.
                const post = post_template({'contents': contents});

                // Add post to DOM.
                document.querySelector('#posts').innerHTML += post;
            }
        </script>
    </head>
    <body>
        <div id="posts">
        </div>
    </body>
</html>



**********************************
Lecture 6 -- posts4/application.py
**********************************


import time

from flask import Flask, jsonify, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/posts", methods=["POST"])
def posts():

    # Get start and end point for posts to generate.
    start = int(request.form.get("start") or 0)
    end = int(request.form.get("end") or (start + 9))

    # Generate list of posts.
    data = []
    for i in range(start, end + 1):
        data.append(f"Post #{i}")

    # Artificially delay speed of response.
    time.sleep(1)

    # Return list of posts.
    return jsonify(data)



****************************************
Lecture 6 -- posts4/templates/index.html
****************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <style>
            @keyframes hide {
                0% {
                    opacity: 1;
                    height: 100%;
                    line-height: 100%;
                    padding: 20px;
                    margin-bottom: 10px;
                }
                75% {
                    opacity: 0;
                    height: 100%;
                    line-height: 100%;
                    padding: 20px;
                    margin-bottom: 10px;
                }
                100% {
                    opacity: 0;
                    height: 0px;
                    line-height: 0px;
                    padding: 0px;
                    margin-bottom: 0px;
                }
            }

            .hide  {
                float: right;
            }

            .post {
                background-color: #77dd11;
                padding: 20px;
                margin-bottom: 10px;
                animation-name: hide;
                animation-duration: 2s;
                animation-fill-mode: forwards;
                animation-play-state: paused;
            }

            body {
                padding-bottom: 50px;
            }
        </style>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.min.js"></script>

        <script id="post" type="text/x-handlebars-template">
            <div class="post">
                {% raw -%}
                    {{ contents }}
                {%- endraw %}
                <button class="hide">Hide</button>
            </div>
        </script>

        <script>

            // Start with first post.
            let counter = 1;

            // Load posts 20 at a time.
            const quantity = 20;

            // When DOM loads, render the first 20 posts.
            document.addEventListener('DOMContentLoaded', load);

            // If scrolled to bottom, load the next 20 posts.
            window.onscroll = () => {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
                    load();
                }
            };

            // If hide button is clicked, delete the post.
            document.addEventListener('click', event => {
                const element = event.target;
                if (element.className === 'hide') {
                    element.parentElement.style.animationPlayState = 'running';
                    element.parentElement.addEventListener('animationend', () =>  {
                        element.parentElement.remove();
                    });
                }
            });

            // Load next set of posts.
            function load() {

                // Set start and end post numbers, and update counter.
                const start = counter;
                const end = start + quantity - 1;
                counter = end + 1;

                // Open new request to get new posts.
                const request = new XMLHttpRequest();
                request.open('POST', '/posts');
                request.onload = () => {
                    const data = JSON.parse(request.responseText);
                    data.forEach(add_post);
                };

                // Add start and end points to request data.
                const data = new FormData();
                data.append('start', start);
                data.append('end', end);

                // Send request.
                request.send(data);
            };

            // Add a new post with given contents to DOM.
            const post_template = Handlebars.compile(document.querySelector('#post').innerHTML);
            function add_post(contents) {

                // Create new post.
                const post = post_template({'contents': contents});

                // Add post to DOM.
                document.querySelector('#posts').innerHTML += post;
            }
        </script>
    </head>
    <body>
        <div id="posts">
        </div>
    </body>
</html>



***************************************
Lecture 6 -- singlepage0/application.py
***************************************


from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

texts = ["Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam tortor mauris, maximus semper volutpat vitae, varius placerat dui. Nunc consequat dictum est, at vestibulum est hendrerit at. Mauris suscipit neque ultrices nisl interdum accumsan. Sed euismod, ligula eget tristique semper, lectus est pellentesque dui, sit amet rhoncus leo mi nec orci. Curabitur hendrerit, est in ultricies interdum, lacus lacus aliquam mauris, vel vestibulum magna nisl id arcu. Cras luctus tellus ac convallis venenatis. Cras consequat tempor tincidunt. Proin ultricies purus mauris, non tempor turpis mollis id. Nam iaculis risus mauris, quis ornare neque semper vel.",
        "Praesent euismod auctor quam, id congue tellus malesuada vitae. Ut sed lacinia quam. Sed vitae mattis metus, vel gravida ante. Praesent tincidunt nulla non sapien tincidunt, vitae semper diam faucibus. Nulla venenatis tincidunt efficitur. Integer justo nunc, egestas eget dignissim dignissim, fermentum ac sapien. Suspendisse non libero facilisis, dictum nunc ut, tincidunt diam.",
        "Morbi imperdiet nunc ac quam hendrerit faucibus. Morbi viverra justo est, ut bibendum lacus vehicula at. Fusce eget risus arcu. Quisque dictum porttitor nisl, eget condimentum leo mollis sed. Proin justo nisl, lacinia id erat in, suscipit ultrices nisi. Suspendisse placerat nulla at volutpat interdum. In porttitor condimentum est nec ultricies. Donec nec mollis neque, id dapibus sem."]

@app.route("/first")
def first():
    return texts[0]

@app.route("/second")
def second():
    return texts[1]

@app.route("/third")
def third():
    return texts[2]



*********************************************
Lecture 6 -- singlepage0/templates/index.html
*********************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <script>

            document.addEventListener('DOMContentLoaded', () => {

                // Start by loading first page.
                load_page('first');

                // Set links up to load new pages.
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.onclick = () => {
                        load_page(link.dataset.page);
                        return false;
                    };
                });
            });

            // Renders contents of new page in main view.
            function load_page(name) {
                const request = new XMLHttpRequest();
                request.open('GET', `/${name}`);
                request.onload = () => {
                    const response = request.responseText;
                    document.querySelector('#body').innerHTML = response;
                };
                request.send();
            }

        </script>
    </head>
    <body>
        <ul id="nav">
            <li><a href="" class="nav-link" data-page="first">First Page</a></li>
            <li><a href="" class="nav-link" data-page="second">Second Page</a></li>
            <li><a href="" class="nav-link" data-page="third">Third Page</a></li>
        </ul>
        <hr>
        <div id="body">
        </div>
    </body>
</html>



***************************************
Lecture 6 -- singlepage1/application.py
***************************************


from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

texts = ["Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam tortor mauris, maximus semper volutpat vitae, varius placerat dui. Nunc consequat dictum est, at vestibulum est hendrerit at. Mauris suscipit neque ultrices nisl interdum accumsan. Sed euismod, ligula eget tristique semper, lectus est pellentesque dui, sit amet rhoncus leo mi nec orci. Curabitur hendrerit, est in ultricies interdum, lacus lacus aliquam mauris, vel vestibulum magna nisl id arcu. Cras luctus tellus ac convallis venenatis. Cras consequat tempor tincidunt. Proin ultricies purus mauris, non tempor turpis mollis id. Nam iaculis risus mauris, quis ornare neque semper vel.",
        "Praesent euismod auctor quam, id congue tellus malesuada vitae. Ut sed lacinia quam. Sed vitae mattis metus, vel gravida ante. Praesent tincidunt nulla non sapien tincidunt, vitae semper diam faucibus. Nulla venenatis tincidunt efficitur. Integer justo nunc, egestas eget dignissim dignissim, fermentum ac sapien. Suspendisse non libero facilisis, dictum nunc ut, tincidunt diam.",
        "Morbi imperdiet nunc ac quam hendrerit faucibus. Morbi viverra justo est, ut bibendum lacus vehicula at. Fusce eget risus arcu. Quisque dictum porttitor nisl, eget condimentum leo mollis sed. Proin justo nisl, lacinia id erat in, suscipit ultrices nisi. Suspendisse placerat nulla at volutpat interdum. In porttitor condimentum est nec ultricies. Donec nec mollis neque, id dapibus sem."]

@app.route("/first")
def first():
    return texts[0]

@app.route("/second")
def second():
    return texts[1]

@app.route("/third")
def third():
    return texts[2]



*********************************************
Lecture 6 -- singlepage1/templates/index.html
*********************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <script>

            document.addEventListener('DOMContentLoaded', () => {

                // Start by loading first page.
                load_page('first');

                // Set links up to load new pages.
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.onclick = () => {
                        const page = link.dataset.page;
                        load_page(page);
                        return false;
                    };
                });
            });

            // Renders contents of new page in main view.
            function load_page(name) {
                const request = new XMLHttpRequest();
                request.open('GET', `/${name}`);
                request.onload = () => {
                    const response = request.responseText;
                    document.querySelector('#body').innerHTML = response;

                    // Push state to URL.
                    document.title = name;
                    history.pushState(null, name, name);
                };
                request.send();
            }

        </script>
    </head>
    <body>
        <ul id="nav">
            <li><a href="" class="nav-link" data-page="first">First Page</a></li>
            <li><a href="" class="nav-link" data-page="second">Second Page</a></li>
            <li><a href="" class="nav-link" data-page="third">Third Page</a></li>
        </ul>
        <hr>
        <div id="body">
        </div>
    </body>
</html>



***************************************
Lecture 6 -- singlepage2/application.py
***************************************


from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

texts = ["Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam tortor mauris, maximus semper volutpat vitae, varius placerat dui. Nunc consequat dictum est, at vestibulum est hendrerit at. Mauris suscipit neque ultrices nisl interdum accumsan. Sed euismod, ligula eget tristique semper, lectus est pellentesque dui, sit amet rhoncus leo mi nec orci. Curabitur hendrerit, est in ultricies interdum, lacus lacus aliquam mauris, vel vestibulum magna nisl id arcu. Cras luctus tellus ac convallis venenatis. Cras consequat tempor tincidunt. Proin ultricies purus mauris, non tempor turpis mollis id. Nam iaculis risus mauris, quis ornare neque semper vel.",
        "Praesent euismod auctor quam, id congue tellus malesuada vitae. Ut sed lacinia quam. Sed vitae mattis metus, vel gravida ante. Praesent tincidunt nulla non sapien tincidunt, vitae semper diam faucibus. Nulla venenatis tincidunt efficitur. Integer justo nunc, egestas eget dignissim dignissim, fermentum ac sapien. Suspendisse non libero facilisis, dictum nunc ut, tincidunt diam.",
        "Morbi imperdiet nunc ac quam hendrerit faucibus. Morbi viverra justo est, ut bibendum lacus vehicula at. Fusce eget risus arcu. Quisque dictum porttitor nisl, eget condimentum leo mollis sed. Proin justo nisl, lacinia id erat in, suscipit ultrices nisi. Suspendisse placerat nulla at volutpat interdum. In porttitor condimentum est nec ultricies. Donec nec mollis neque, id dapibus sem."]

@app.route("/first")
def first():
    return texts[0]

@app.route("/second")
def second():
    return texts[1]

@app.route("/third")
def third():
    return texts[2]



*********************************************
Lecture 6 -- singlepage2/templates/index.html
*********************************************


<!DOCTYPE html>
<html>
    <head>
        <title>My Webpage</title>
        <script>

            document.addEventListener('DOMContentLoaded', () => {

                // Start by loading first page.
                load_page('first');

                // Set links up to load new pages.
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.onclick = () => {
                        const page = link.dataset.page;
                        load_page(page);
                        return false;
                    };
                });
            });

            // Update text on popping state.
            window.onpopstate = e => {
                const data = e.state;
                document.title = data.title;
                document.querySelector('#body').innerHTML = data.text;
            };

            // Renders contents of new page in main view.
            function load_page(name) {
                const request = new XMLHttpRequest();
                request.open('GET', `/${name}`);
                request.onload = () => {
                    const response = request.responseText;
                    document.querySelector('#body').innerHTML = response;

                    // Push state to URL.
                    document.title = name;
                    history.pushState({'title': name, 'text': response}, name, name);
                };
                request.send();
            }

        </script>
    </head>
    <body>
        <ul id="nav">
            <li><a href="" class="nav-link" data-page="first">First Page</a></li>
            <li><a href="" class="nav-link" data-page="second">Second Page</a></li>
            <li><a href="" class="nav-link" data-page="third">Third Page</a></li>
        </ul>
        <hr>
        <div id="body">
        </div>
    </body>
</html>



